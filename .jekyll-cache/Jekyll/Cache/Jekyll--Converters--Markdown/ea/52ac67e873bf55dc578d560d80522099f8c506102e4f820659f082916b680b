I"(l<details open="">
  <summary class="text-delta">
    Table of contents
  </summary>
<ol id="markdown-toc">
  <li><a href="#before-you-begin" id="markdown-toc-before-you-begin">Before you Begin</a></li>
  <li><a href="#deferencing-of-pointers" id="markdown-toc-deferencing-of-pointers">Deferencing of Pointers</a></li>
  <li><a href="#arrays" id="markdown-toc-arrays">Arrays</a>    <ol>
      <li><a href="#case-study-counting-problem" id="markdown-toc-case-study-counting-problem">Case Study: Counting Problem</a></li>
      <li><a href="#case-study-search-problem" id="markdown-toc-case-study-search-problem">Case Study: Search Problem</a></li>
    </ol>
  </li>
  <li><a href="#multidimensional-arrays" id="markdown-toc-multidimensional-arrays">Multidimensional Arrays</a></li>
</ol>

</details>

<h1 id="before-you-begin">Before you Begin</h1>

<p>Bjourne says that pointers should be used judiciously since they may make computation slowly due to dereferncing and other activities of pointers.</p>

<p>Also, they should be abstracted at higher levels so that it becomes easy to read code. Basically pointers should be hidden away well at higher levels.</p>

<p><img src="/images/pointers.png" alt="pointers" /></p>

<h1 id="deferencing-of-pointers">Deferencing of Pointers</h1>

<ul>
  <li>This is the act of accessing the value stored at the location which the pointer is pointing to.</li>
  <li>This act is represented by the <code class="language-plaintext highlighter-rouge">*</code> operator</li>
</ul>

<p><img src="/images/deferencing_pointers.png" alt="deferencing_pointers" /></p>

<p><strong>In the above image we can see that:</strong></p>
<ul>
  <li><strong>pointerToA = address value</strong></li>
  <li><strong>*pointerToA = value (deferenced)</strong></li>
</ul>

<p>Another example to illustrate:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*For this program print for each variable
**print the value of the variable, 
**then print the address where it is stored. 
*/</span>
<span class="cp">#include&lt;iostream&gt;
#include&lt;string&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">givenInt</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">givenString</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">givenChar</span><span class="p">;</span>
    
    <span class="c1">//printing the values of each of these variables</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">givenInt</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"string is"</span><span class="o">&lt;&lt;</span><span class="n">givenString</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">givenChar</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    
    <span class="c1">//printing the address of these variables</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;&amp;</span><span class="n">givenInt</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;&amp;</span><span class="n">givenString</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;&amp;</span><span class="n">givenChar</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But the alternative cleaner way to do it is:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">//*Sample program for Pointers*/</span>

<span class="cp">#include&lt;iostream&gt;
#include&lt;string&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">givenInt</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">givenFloat</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">givenDouble</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">givenString</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">givenChar</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">pointerGivenInt</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">**</span><span class="n">pointerPointerGivenInt</span><span class="p">;</span>

    <span class="n">pointerGivenInt</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">givenInt</span><span class="p">;</span>
    <span class="n">pointerPointerGivenInt</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">pointerGivenInt</span><span class="p">;</span>

   <span class="c1">//Get the values of each variable</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"integer = </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">givenInt</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"float = </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">givenFloat</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"double = </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">givenDouble</span><span class="p">;</span>
    <span class="c1">//We need to use cin.ignore so cin will ignore </span>
   <span class="c1">//the characters in the buffer leftover</span>
   <span class="c1">//from the givenDouble</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">.</span><span class="n">ignore</span><span class="p">();</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"character = </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">givenChar</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"string = </span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">.</span><span class="n">ignore</span><span class="p">();</span>
    <span class="n">std</span><span class="o">::</span><span class="n">getline</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">,</span><span class="n">givenString</span><span class="p">);</span>


    <span class="c1">//The value stored in the data</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"integer = "</span><span class="o">&lt;&lt;</span><span class="n">givenInt</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"float = "</span><span class="o">&lt;&lt;</span><span class="n">givenFloat</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"double = "</span><span class="o">&lt;&lt;</span><span class="n">givenDouble</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"string = "</span><span class="o">&lt;&lt;</span><span class="n">givenString</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"character = "</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">givenChar</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">;</span>

    <span class="c1">//The address of the data - use pointers</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"address integer = "</span><span class="o">&lt;&lt;&amp;</span><span class="n">givenInt</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"address float = "</span><span class="o">&lt;&lt;&amp;</span><span class="n">givenFloat</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"address double = "</span><span class="o">&lt;&lt;&amp;</span><span class="n">givenDouble</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"address string = "</span><span class="o">&lt;&lt;&amp;</span><span class="n">givenString</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="s">"address character = "</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">givenChar</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">;</span>

   <span class="c1">//Use indirection to the get the value stored at the address</span>
   <span class="c1">//this is basically deferencing a pointer (as we are using the * symbol)</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="s">"pointer of givenInt = "</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">pointerGivenInt</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="s">"pointer of pointer of givenInt = "</span> <span class="o">&lt;&lt;</span> <span class="o">**</span><span class="n">pointerPointerGivenInt</span><span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Note how the char variable address and pointers are treated</strong></p>

<p>The output will look like the follwing:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>integer = 
float = 
double = 
character = 
string = 
integer = 32
float = 64.212
double = 4.76545
string = Hey look at me! I know pointers!"
character = *

address integer = 0x7ffd812a9258
address float = 0x7ffd812a925c
address double = 0x7ffd812a9278
address string = 0x7ffd812a9270
address character = 0x7ffd812a9257

pointer of givenInt = 32
pointer of pointer of givenInt = 32
</code></pre></div></div>

<h1 id="arrays">Arrays</h1>

<h2 id="case-study-counting-problem">Case Study: Counting Problem</h2>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">userInput</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">maxNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">minNumber</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">sumTotal</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">average</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> 

    <span class="c1">//get the numbers from the user</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Enter a number: "</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">userInput</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">userInput</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">userInput</span> <span class="o">&gt;</span> <span class="n">maxNumber</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">maxNumber</span> <span class="o">=</span> <span class="n">userInput</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">userInput</span> <span class="o">&lt;</span> <span class="n">minNumber</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">minNumber</span> <span class="o">=</span> <span class="n">userInput</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">sumTotal</span> <span class="o">=</span> <span class="n">sumTotal</span> <span class="o">+</span> <span class="n">userInput</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Maximum number = "</span> <span class="o">&lt;&lt;</span> <span class="n">maxNumber</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Minimum number = "</span> <span class="o">&lt;&lt;</span> <span class="n">minNumber</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="n">average</span> <span class="o">=</span> <span class="n">sumTotal</span> <span class="o">/</span> <span class="mf">15.0</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Average = "</span> <span class="o">&lt;&lt;</span> <span class="n">average</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Another similar problem. But this uses <strong>scanf</strong></p>

<p><strong>Note how we use a pointer when using scanf</strong></p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">userInput</span><span class="p">[</span><span class="mi">40</span><span class="p">];</span>

    <span class="c1">//Enter the numbers into an array called userInput</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">userInput</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="c1">//print the array</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">The array</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">40</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">userInput</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//print the array in reverse order</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n\n</span><span class="s">The array in reverse order</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">39</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">userInput</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="case-study-search-problem">Case Study: Search Problem</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">#include &lt;iostream&gt;
</span> <span class="cp">#include &lt;stdio.h&gt;
</span>
 <span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
 <span class="p">{</span>
     <span class="kt">int</span> <span class="n">searchKey</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
     <span class="kt">int</span> <span class="n">searchArray</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">324</span><span class="p">,</span><span class="mi">4567</span><span class="p">,</span><span class="mi">6789</span><span class="p">,</span><span class="mi">5421345</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">65</span><span class="p">,</span><span class="mi">8965</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">342</span><span class="p">,</span><span class="mi">485</span><span class="p">};</span>
     <span class="kt">int</span> <span class="n">location</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

     <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
     <span class="p">{</span>
         <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"Enter an integer ('-1' to quit): "</span><span class="p">;</span>
         <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">searchKey</span><span class="p">);</span>
         <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span> <span class="n">searchKey</span><span class="o">&lt;&lt;</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
         <span class="k">if</span><span class="p">(</span><span class="n">searchKey</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
         <span class="p">{</span>
             <span class="k">break</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
         <span class="p">{</span>
             <span class="k">if</span><span class="p">(</span><span class="n">searchKey</span> <span class="o">==</span> <span class="n">searchArray</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
             <span class="p">{</span>
                 <span class="n">location</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                 <span class="k">break</span><span class="p">;</span>
             <span class="p">}</span>
             <span class="n">location</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="k">if</span><span class="p">(</span><span class="n">location</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
         <span class="p">{</span>
             <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">searchKey</span><span class="o">&lt;&lt;</span><span class="s">" is at location "</span><span class="o">&lt;&lt;</span><span class="n">location</span><span class="o">&lt;&lt;</span><span class="s">" in the array.</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="k">else</span>
         <span class="p">{</span>
             <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">searchKey</span><span class="o">&lt;&lt;</span><span class="s">" is not in the array.</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
         <span class="p">}</span>
    <span class="p">}</span>
     <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div></div>

<h1 id="multidimensional-arrays">Multidimensional Arrays</h1>

<p>To create a 2x3 array you just need to do:
<code class="language-plaintext highlighter-rouge">int array2d[2][3];</code></p>

<p>You could also initialize them with:
<code class="language-plaintext highlighter-rouge">int array2D[2][3] = {0,1,2,3,4,5};</code></p>

<p>But this will initialize it in the row-major order, i.e.:</p>
<ul>
  <li>[0][0]</li>
  <li>[0][1]</li>
  <li>[0][2]</li>
  <li>[1][0]</li>
  <li>[1][1]</li>
  <li>[1][2]</li>
</ul>

:ET